; Tue Nov 10 15:02:49 GMT-06:00 2009
; 
;+ (version "3.3")
;+ (build "Build 418")


(defclass %3ACLIPS_TOP_LEVEL_SLOT_CLASS "Fake class to save top-level slot information"
	(is-a USER)
	(role abstract)
	(multislot failureConflictSet
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(create-accessor read-write))
	(single-slot solutionDescription
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot problem
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot evaluatedSolution
		(type INSTANCE)
;+		(allowed-classes PossibleSolution)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot cases
		(type INSTANCE)
;+		(allowed-classes Case)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot points
		(type FLOAT)
		(range 0.0 %3FVARIABLE)
		(default 0.0)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot description
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot possibleSolutions
		(type INSTANCE)
;+		(allowed-classes PossibleSolution)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(multislot successfulConflictSet
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(create-accessor read-write))
	(multislot hypothesis
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot to
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot leastSimilarityDegree
		(type SYMBOL)
		(allowed-values Diferente PocoSimilar RelativamenteSimilar MedianamenteSimilar ConsiderablementeSimilar AltamenteSimilar Igual)
		(default MEDIANAMENTESIMILAR)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot proposedSolution
		(type INSTANCE)
;+		(allowed-classes ProposedSolution)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot possibleSolution
		(type INSTANCE)
;+		(allowed-classes Taxon Case)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot rank
		(type SYMBOL)
		(allowed-values Family Genus Species)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot certaintyDegree
		(type SYMBOL)
		(allowed-values Certain Doubtful Uncertain)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot doubtfulDescription
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot goalRank
		(type SYMBOL)
		(allowed-values Family Genus Species)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot state
		(type SYMBOL)
		(allowed-values FALSE TRUE)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot contradictions
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot case
		(type INSTANCE)
;+		(allowed-classes Case)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot confirmedDescription
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot justification
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot unmatchedDescription
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot similarTo
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot proposedSolutions
		(type INSTANCE)
;+		(allowed-classes ProposedSolution)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot unconfirmedDescription
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot solution
		(type INSTANCE)
;+		(allowed-classes Solution)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Resolve
	(is-a AgentAction)
	(role concrete)
	(single-slot problem
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Retain
	(is-a AgentAction)
	(role concrete)
	(single-slot case
		(type INSTANCE)
;+		(allowed-classes Case)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Retrieve
	(is-a AgentAction)
	(role concrete)
	(single-slot similarTo
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Adapt
	(is-a AgentAction)
	(role concrete)
	(multislot successfulConflictSet
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(create-accessor read-write))
	(multislot failureConflictSet
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(create-accessor read-write))
	(single-slot to
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Evaluate
	(is-a AgentAction)
	(role concrete)
	(multislot successfulConflictSet
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(create-accessor read-write))
	(multislot failureConflictSet
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(create-accessor read-write))
	(single-slot to
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Select
	(is-a AgentAction)
	(role concrete)
	(multislot successfulConflictSet
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(create-accessor read-write))
	(multislot failureConflictSet
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(create-accessor read-write))
	(single-slot to
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Case
	(is-a Concept)
	(role concrete)
	(single-slot solution
		(type INSTANCE)
;+		(allowed-classes Solution)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot problem
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot state
		(type SYMBOL)
		(allowed-values FALSE TRUE)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Problem
	(is-a Concept)
	(role concrete)
	(single-slot description
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot leastSimilarityDegree
		(type SYMBOL)
		(allowed-values Diferente PocoSimilar RelativamenteSimilar MedianamenteSimilar ConsiderablementeSimilar AltamenteSimilar Igual)
		(default MEDIANAMENTESIMILAR)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot goalRank
		(type SYMBOL)
		(allowed-values Family Genus Species)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Solution
	(is-a Concept)
	(role concrete)
	(single-slot justification
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot rank
		(type SYMBOL)
		(allowed-values Family Genus Species)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot name_
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass PossibleSolution
	(is-a Concept)
	(role concrete)
	(single-slot confirmedDescription
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot solutionDescription
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot unconfirmedDescription
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot possibleSolution
		(type INSTANCE)
;+		(allowed-classes Taxon Case)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot doubtfulDescription
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot contradictions
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot points
		(type FLOAT)
		(range 0.0 %3FVARIABLE)
		(default 0.0)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass ProposedSolution
	(is-a Concept)
	(role concrete)
	(single-slot certaintyDegree
		(type SYMBOL)
		(allowed-values Certain Doubtful Uncertain)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot evaluatedSolution
		(type INSTANCE)
;+		(allowed-classes PossibleSolution)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot state
		(type SYMBOL)
		(allowed-values FALSE TRUE)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Hypothesis
	(is-a Concept)
	(role concrete)
	(single-slot description
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot possibleSolutions
		(type INSTANCE)
;+		(allowed-classes PossibleSolution)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot justification
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot unmatchedDescription
		(type INSTANCE)
;+		(allowed-classes Description)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass IsPositive
	(is-a Predicate)
	(role concrete)
	(single-slot case
		(type INSTANCE)
;+		(allowed-classes Case)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass IsNegative
	(is-a Predicate)
	(role concrete)
	(single-slot case
		(type INSTANCE)
;+		(allowed-classes Case)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass AreSimilarTo
	(is-a Predicate)
	(role concrete)
	(multislot successfulConflictSet
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(create-accessor read-write))
	(multislot failureConflictSet
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(create-accessor read-write))
	(single-slot problem
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass AreReasonableSolutionsTo
	(is-a Predicate)
	(role concrete)
	(multislot proposedSolutions
		(type INSTANCE)
;+		(allowed-classes ProposedSolution)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot problem
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass IsTheMostReasonableTo
	(is-a Predicate)
	(role concrete)
	(single-slot proposedSolution
		(type INSTANCE)
;+		(allowed-classes ProposedSolution)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot problem
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass AreEvaluatedSolutionsTo
	(is-a Predicate)
	(role concrete)
	(multislot successfulConflictSet
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(create-accessor read-write))
	(multislot failureConflictSet
		(type INSTANCE)
;+		(allowed-classes Hypothesis)
		(create-accessor read-write))
	(single-slot to
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass AreSelectedSolutionsTo
	(is-a Predicate)
	(role concrete)
	(single-slot to
		(type INSTANCE)
;+		(allowed-classes Problem)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot proposedSolutions
		(type INSTANCE)
;+		(allowed-classes ProposedSolution)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write)))